import {MongoMemoryServer} from "mongodb-memory-server"; 
import mongoose from "mongoose";
import Goal from "../../db/goalsDB";
import User from "../../db/userDB";
import {addGoal, getAllGoals, editGoal, deleteGoal} from "../../db/goalsService";
import {addUser} from "../../db/userService";

// Test settings assisted by AI
beforeEach(() => {
  jest.spyOn(console, "error").mockImplementation(() => {});
});
afterEach(() => {
  jest.restoreAllMocks();
});

describe("Goals Service Tests", () => {
  let mongoServer: MongoMemoryServer;
  let userId: string;

  beforeAll(async () => {
    mongoose.set('strictQuery', true);
    mongoServer = await MongoMemoryServer.create();
    const mongoUri = mongoServer.getUri();
    await mongoose.connect(mongoUri);
  });

  afterAll(async () => {
    await mongoose.disconnect();
    await mongoServer.stop();
  });

  beforeEach(async () => {
    await Goal.deleteMany({});
    await User.deleteMany({});
    const user = await addUser("goalUser", "password123", 500);
    userId = user._id.toString();
  });

  // Add Goal tests
  describe("addGoal Tests", () => {
    test("should add a goal", async () => {
      const goal = await addGoal(userId, "Save for Laptop", "2025-12-31", 200, 1000, "Saving");
      expect(goal.name).toBe("Save for Laptop");
      expect(goal.goalAmount).toBe(1000);
    });

  // Example test case generated by AI
    test("should not add a goal with an invalid category", async () => {
      await expect(addGoal(userId, "Invalid Goal", "2025-12-31", 100, 500, "InvalidCategory"))
        .rejects.toThrow("Invalid category. Must be one of: Saving, Investment, Debt Payment, Other");
    });

    test("should throw error if user does not exist", async () => {
      const invalidUserId = new mongoose.Types.ObjectId().toString();
      await expect(addGoal(invalidUserId, "New Goal", "2025-12-31", 100, 500, "Saving"))
        .rejects.toThrow("User does not exist");
    });
  
    test("should not add a goal with invalid date format", async () => {
      await expect(addGoal(userId, "Invalid Date Goal", "invalid-date", 100, 500, "Saving"))
        .rejects.toThrow();
    });

    test("should not add a goal with negative currAmount or goalAmount", async () => {
      await expect(addGoal(userId, "Negative Amount Goal", "2025-12-31", -100, 500, "Saving"))
        .rejects.toThrow();
      await expect(addGoal(userId, "Negative GoalAmount", "2025-12-31", 100, -500, "Saving"))
        .rejects.toThrow();
    });
    
  });

  // Get All Goals tests
  describe("getAllGoals Tests", () => {
    test("should retrieve all goals for a user", async () => {
      await addGoal(userId, "Goal1", "2025-12-31", 200, 1000, "Saving");
      await addGoal(userId, "Goal2", "2026-06-30", 500, 1500, "Investment");
      const goals = await getAllGoals(userId);
      expect(goals.length).toBe(2);
    });

    test("should return empty array if user has no goals", async () => {
      const goals = await getAllGoals(userId);
      expect(goals.length).toBe(0);
    });

    test("should not get goals with invalid user ID", async () => {
      await expect(getAllGoals("invalid-user-id")).rejects.toThrow();
    });
  });

  // Edit Goal tests
  describe("editGoal Tests", () => {
    test("should edit a goal", async () => {
      const goal = await addGoal(userId, "Edit Goal", "2025-12-31", 300, 800, "Saving");
      const updatedGoal = await editGoal(goal._id.toString(), "Updated Goal", undefined, 400, 1200);
      expect(updatedGoal).not.toBeNull();
      expect(updatedGoal?.name).toBe("Updated Goal");
      expect(updatedGoal?.goalAmount).toBe(1200);
    });

    test("should not allow currAmount to exceed goalAmount", async () => {
      const goal = await addGoal(userId, "Goal to Edit", "2025-12-31", 200, 1000, "Saving");
      const updatedGoal = await editGoal(goal._id.toString(), undefined, undefined, 1200, 1000);
      expect(updatedGoal?.currAmount).toBe(1000);
    });

  // Example test case generated by AI
    test("should not edit goal with invalid category", async () => {
      const goal = await addGoal(userId, "Valid Goal", "2025-12-31", 100, 500, "Saving");
      await expect(
        editGoal(goal._id.toString(), "Updated Goal", undefined, 200, 600, "InvalidCategory")
      ).rejects.toThrow("Invalid category. Must be one of: Saving, Investment, Debt Payment, Other");
    });

    test("should not edit a non-existent goal", async () => {
      await expect(editGoal(new mongoose.Types.ObjectId().toString(), "New Name")).resolves.toBeNull();
    });

    test("should not edit a goal with invalid ID", async () => {
      await expect(editGoal("invalid-id", "New Name")).rejects.toThrow("Invalid goal ID format");
    });

    test("should update a goal's category", async () => {
      const goal = await addGoal(userId, "Initial Goal", "2025-12-31", 300, 800, "Saving");
    
      const updatedGoal = await editGoal(goal._id.toString(), undefined, undefined, undefined, undefined, "Investment");
    
      expect(updatedGoal).not.toBeNull();
      expect(updatedGoal?.category).toBe("Investment");
    
      expect(updatedGoal?.name).toBe("Initial Goal");
      expect(updatedGoal?.currAmount).toBe(300);
      expect(updatedGoal?.goalAmount).toBe(800);
    });
    
  });

  // Delete Goal tests
  describe("deleteGoal Tests", () => {
    test("should delete a goal", async () => {
      const goal = await addGoal(userId, "Delete Goal", "2025-12-31", 100, 500, "Saving");
      await deleteGoal(goal._id.toString());
      const goals = await getAllGoals(userId);
      expect(goals.length).toBe(0);
    });

    test("should not delete a non-existent goal", async () => {
      const result = await deleteGoal(new mongoose.Types.ObjectId().toString());
      expect(result.deletedCount).toBe(0);
    });

    test("should not delete a goal with invalid ID", async () => {
      await expect(deleteGoal("invalid-id")).rejects.toThrow();
    });
  });
});
